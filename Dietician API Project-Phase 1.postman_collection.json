{
	"info": {
		"_postman_id": "87a3bd1d-7d25-4aa9-b8b2-c547583c0370",
		"name": "Dietician API Project-Phase 1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37339452"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "Admin Login Logout",
					"item": [
						{
							"name": "Admin Invalid Login",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\":\"test\",\n  \"userLoginEmail\":\"Team5@gmail.com\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/login",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Login",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\":\"test\",\n  \"userLoginEmail\":\"Team5@gmail.com\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/login",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Logout",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/logoutdietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"logoutdietician"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dietician Controller",
					"item": [
						{
							"name": "Create Dietician with Invaild Data",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"6234567890\",\n  \"DateOfBirth\": \"1989-02-24T18:14:08.570Z\",\n  \"Education\": \"MSc Nutrition and Dietetics\",\n  \"Email\": \"UK_D3@gmail.com\",\n  \"Firstname\": \"CCC\",\n  \"HospitalCity\": \"Delhi\",\n  \"HospitalName\": \"Fortis\",\n  \"HospitalPincode\": \"923456\",\n  \"HospitalStreet\": \"Vasant St\",\n  \"Lastname\": \"YYY\"\n \n}\n\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Dietician",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Bearer_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"6234567890\",\n  \"DateOfBirth\": \"1989-02-24T18:14:08.570Z\",\n  \"Education\": \"MSc Nutrition and Dietetics\",\n  \"Email\": \"UK_D3@gmail.com\",\n  \"Firstname\": \"CCC\",\n  \"HospitalCity\": \"Delhi\",\n  \"HospitalName\": \"Fortis\",\n  \"HospitalPincode\": \"923456\",\n  \"HospitalStreet\": \"Vasant St\",\n  \"Lastname\": \"YYY\"\n \n}\n\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Dietician with Duplicate Value",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Bearer_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"6234567890\",\n  \"DateOfBirth\": \"1989-02-24T18:14:08.570Z\",\n  \"Education\": \"MSc Nutrition and Dietetics\",\n  \"Email\": \"UK_D3@gmail.com\",\n  \"Firstname\": \"CCC\",\n  \"HospitalCity\": \"Delhi\",\n  \"HospitalName\": \"Fortis\",\n  \"HospitalPincode\": \"923456\",\n  \"HospitalStreet\": \"Vasant St\",\n  \"Lastname\": \"YYY\"\n \n}\n\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upadate Dietician",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Bearer_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"6234567890\",\n  \"DateOfBirth\": \"1989-02-24T18:14:08.570Z\",\n  \"Education\": \"MSc Nutrition and Dietetics\",\n  \"Email\": \"UK_D3@gmail.com\",\n  \"Firstname\": \"CCC\",\n  \"HospitalCity\": \"Kerala\",\n  \"HospitalName\": \"Fortis\",\n  \"HospitalPincode\": \"923456\",\n  \"HospitalStreet\": \"Vasant St\",\n  \"Lastname\": \"YYY\"\n \n}\n\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician/215",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician",
										"215"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Dietician For Invalid Dietician",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Bearer_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"6234567890\",\n  \"DateOfBirth\": \"1989-02-24T18:14:08.570Z\",\n  \"Education\": \"MSc Nutrition and Dietetics\",\n  \"Email\": \"UK_D3@gmail.com\",\n  \"Firstname\": \"CCC\",\n  \"HospitalCity\": \"Kerala\",\n  \"HospitalName\": \"Fortis\",\n  \"HospitalPincode\": \"923456\",\n  \"HospitalStreet\": \"Vasant St\",\n  \"Lastname\": \"YYY\"\n \n}\n\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician/215",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician",
										"215"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve All Dietician Info",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Bearer_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"6234567890\",\n  \"DateOfBirth\": \"1989-02-24T18:14:08.570Z\",\n  \"Education\": \"MSc Nutrition and Dietetics\",\n  \"Email\": \"UK_D3@gmail.com\",\n  \"Firstname\": \"CCC\",\n  \"HospitalCity\": \"Kerala\",\n  \"HospitalName\": \"Fortis\",\n  \"HospitalPincode\": \"923456\",\n  \"HospitalStreet\": \"Vasant St\",\n  \"Lastname\": \"YYY\"\n \n}\n\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve For Invalid Dietician",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Bearer_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"6234567890\",\n  \"DateOfBirth\": \"1989-02-24T18:14:08.570Z\",\n  \"Education\": \"MSc Nutrition and Dietetics\",\n  \"Email\": \"UK_D3@gmail.com\",\n  \"Firstname\": \"CCC\",\n  \"HospitalCity\": \"Kerala\",\n  \"HospitalName\": \"Fortis\",\n  \"HospitalPincode\": \"923456\",\n  \"HospitalStreet\": \"Vasant St\",\n  \"Lastname\": \"YYY\"\n \n}\n\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Dietician info by ID",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Bearer_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"6234567890\",\n  \"DateOfBirth\": \"1989-02-24T18:14:08.570Z\",\n  \"Education\": \"MSc Nutrition and Dietetics\",\n  \"Email\": \"UK_D3@gmail.com\",\n  \"Firstname\": \"CCC\",\n  \"HospitalCity\": \"Kerala\",\n  \"HospitalName\": \"Fortis\",\n  \"HospitalPincode\": \"923456\",\n  \"HospitalStreet\": \"Vasant St\",\n  \"Lastname\": \"YYY\"\n \n}\n\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician/212",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician",
										"212"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Dietician info with Invalid ID",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Bearer_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"6234567890\",\n  \"DateOfBirth\": \"1989-02-24T18:14:08.570Z\",\n  \"Education\": \"MSc Nutrition and Dietetics\",\n  \"Email\": \"UK_D3@gmail.com\",\n  \"Firstname\": \"CCC\",\n  \"HospitalCity\": \"Kerala\",\n  \"HospitalName\": \"Fortis\",\n  \"HospitalPincode\": \"923456\",\n  \"HospitalStreet\": \"Vasant St\",\n  \"Lastname\": \"YYY\"\n \n}\n\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician/212",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician",
										"212"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve All Morbidity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//const Morbidity=pm.response.json();",
											"pm.collectionVariables.set(\"{{Morbidities}}\", pm.response.json());",
											"",
											"//const M1=Morbidities.map((value)=>value.morbidityId);",
											"console.log(Morbidities);",
											"//console.log(M1.indexOf('morbidityTestName')"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/morbidity",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Morbidity condition by Test name",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/morbidity",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Morbidity condition by Invalid Test name",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/morbidity",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Valid Dietician ID",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Bearer_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"6234567890\",\n  \"DateOfBirth\": \"1989-02-24T18:14:08.570Z\",\n  \"Education\": \"MSc Nutrition and Dietetics\",\n  \"Email\": \"UK_D3@gmail.com\",\n  \"Firstname\": \"CCC\",\n  \"HospitalCity\": \"Kerala\",\n  \"HospitalName\": \"Fortis\",\n  \"HospitalPincode\": \"923456\",\n  \"HospitalStreet\": \"Vasant St\",\n  \"Lastname\": \"YYY\"\n \n}\n\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Invalid Dietician ID",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Bearer_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"6234567890\",\n  \"DateOfBirth\": \"1989-02-24T18:14:08.570Z\",\n  \"Education\": \"MSc Nutrition and Dietetics\",\n  \"Email\": \"UK_D3@gmail.com\",\n  \"Firstname\": \"CCC\",\n  \"HospitalCity\": \"Kerala\",\n  \"HospitalName\": \"Fortis\",\n  \"HospitalPincode\": \"923456\",\n  \"HospitalStreet\": \"Vasant St\",\n  \"Lastname\": \"YYY\"\n \n}\n\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Dietician",
			"item": [
				{
					"name": "Dietician Login Logout",
					"item": [
						{
							"name": "Dietician Invalid Login",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"Prosper09\",\n  \"userLoginEmail\": \"UK_D4@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/login",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dietician Login",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"Prosper09\",\n  \"userLoginEmail\": \"UK_D4@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/login",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dietician Logout",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtNUBnbWFpbC5jb20iLCJpYXQiOjE3MjI0NTI3MjAsImV4cCI6MTcyMjQ4MTUyMH0.UjGoOpe9iAmcssj-bPw4IGf6EKRKQmmqpR2REJLf3ovNOMBqmmXtfuAYyXBA9IaGfLTIr4rKv8cCJ8j9N_ORwQ",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/logoutdietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"logoutdietician"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Patient Controller",
					"item": [
						{
							"name": "Create Patient with Invaild Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{D4_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{{patientValue}}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50788-00dc-4b60-acec-9a405c9f26c1"
										}
									]
								},
								"url": {
									"raw": "{{BaseURL}}/patient",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{D1_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{{patientValue}}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50788-00dc-4b60-acec-9a405c9f26c1"
										}
									]
								},
								"url": {
									"raw": "{{BaseURL}}/patient",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Patient with Duplicate Value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Patient already exists with given DateOfBirth and ContactNumber\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"DUPLICATE_ENTITY\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{D1_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{{patientValue}}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50788-00dc-4b60-acec-9a405c9f26c1"
										}
									]
								},
								"url": {
									"raw": "{{BaseURL}}/patient",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Patient",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Update Patient with Invalid Data",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Add New Reports for existing Patient with Vitals",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Add New Reports  for existing Patient without Vitals Copy",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Add New Reports for Invalid Patient with Vitals Copy",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Add New Reports  for Invalid Patient without Vitals",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Patients Morbidity Details",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Patients Morbidity Details with Invalid PatientID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - errorCode and errorMessage\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.errorCode).to.exist;\r",
											"    pm.expect(responseData.errorMessage).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"ErrorCode should be NOT_FOUND\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.errorCode).to.equal(\"NOT_FOUND\");\r",
											"});\r",
											"\r",
											"pm.test(\"ErrorMessage contains Morbidity not found with MorbidityTestName\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.errorMessage).to.contain(\"Morbidity not found with MorbidityTestName\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{D4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/morbidity/100000",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"morbidity",
										"100000"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve All Patient Info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate the response schema for required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"    \r",
											"    responseData.forEach(function(patient) {\r",
											"        pm.expect(patient).to.have.property('patientId');\r",
											"        pm.expect(patient).to.have.property('FirstName');\r",
											"        pm.expect(patient).to.have.property('LastName');\r",
											"        pm.expect(patient).to.have.property('ContactNumber');\r",
											"        pm.expect(patient).to.have.property('Email');\r",
											"        pm.expect(patient).to.have.property('Allergy');\r",
											"        pm.expect(patient).to.have.property('FoodPreference');\r",
											"        pm.expect(patient).to.have.property('CuisineCategory');\r",
											"        pm.expect(patient).to.have.property('FileMorbidity');\r",
											"        pm.expect(patient).to.have.property('FileMorbidityCondition');\r",
											"        pm.expect(patient).to.have.property('DateOfBirth');\r",
											"        pm.expect(patient).to.have.property('DieticianId');\r",
											"        pm.expect(patient).to.have.property('Vitals');\r",
											"        pm.expect(patient).to.have.property('LastVisitDate');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"DateOfBirth is in a valid date format\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    responseData.forEach(function(patient) {\r",
											"        pm.expect(patient.DateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"pm.test(\"Vital signs are present in the response\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    responseData.forEach(function(patient) {\r",
											"        pm.expect(patient.Vitals).to.exist.and.to.be.an('object').and.to.not.be.empty;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{D4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/patient",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Patient file by File Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within an acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required Content-Type header\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/pdf\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is application/pdf\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/pdf\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{D4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/patient/testReports/viewFile/66ac4c6f3e6c022b073da3d8",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"patient",
										"testReports",
										"viewFile",
										"66ac4c6f3e6c022b073da3d8"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Patient file by Invalid File Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - errorCode and errorMessage\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.errorCode).to.exist;\r",
											"    pm.expect(responseData.errorMessage).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate response schema matches the expected format\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('errorCode');\r",
											"    pm.expect(responseData).to.have.property('errorMessage');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{D4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/patient/testReports/viewFile/66ac37aa3e6c022b073da33f543",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"patient",
										"testReports",
										"viewFile",
										"66ac37aa3e6c022b073da33f543"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve All Morbidity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//const Morbidity=pm.response.json();",
											"//pm.collectionVariables.set(\"{{Morbidities}}\", pm.response.json());",
											"",
											"//const M1=Morbidities.map((value)=>value.morbidityId);",
											"//console.log(Morbidities);",
											"//console.log(M1.indexOf('morbidityTestName')",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach((item) => {",
											"        pm.expect(item).to.include.all.keys(",
											"            'morbidityId',",
											"            'morbidityTestId',",
											"            'morbidityNameRegex',",
											"            'morbidityTestName',",
											"            'morbidityTestUnit',",
											"            'morbidityMarkerMinVal',",
											"            'morbidityMarkerMaxVal'",
											"        );",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Morbidity marker minimum value and maximum value are non-negative integers\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    responseData.forEach(function(item) {",
											"        pm.expect(item.morbidityMarkerMinVal).to.be.a('number').and.to.be.at.least(0);",
											"        pm.expect(item.morbidityMarkerMaxVal).to.be.a('number').and.to.be.at.least(0);",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{D4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/morbidity",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Morbidity condition by Test name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate the schema for each object in the array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.be.an('object');\r",
											"        pm.expect(item).to.have.property('morbidityId').that.is.a('number');\r",
											"        pm.expect(item).to.have.property('morbidityTestId').that.is.a('string');\r",
											"        pm.expect(item).to.have.property('morbidityNameRegex').that.is.a('string');\r",
											"        pm.expect(item).to.have.property('morbidityTestName').that.is.a('string');\r",
											"        pm.expect(item).to.have.property('morbidityTestUnit').that.is.a('string');\r",
											"        pm.expect(item).to.have.property('morbidityMarkerMinVal').that.is.a('number');\r",
											"        pm.expect(item).to.have.property('morbidityMarkerMaxVal').that.is.a('number');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/morbidity/Fasting Glucose",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"morbidity",
										"Fasting Glucose"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Morbidity condition by Invalid Test name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate the structure of the response object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(function(item) {\r",
											"        pm.expect(item).to.have.property('morbidityId');\r",
											"        pm.expect(item).to.have.property('morbidityTestId');\r",
											"        pm.expect(item).to.have.property('morbidityNameRegex');\r",
											"        pm.expect(item).to.have.property('morbidityTestName');\r",
											"        pm.expect(item).to.have.property('morbidityTestUnit');\r",
											"        pm.expect(item).to.have.property('morbidityMarkerMinVal');\r",
											"        pm.expect(item).to.have.property('morbidityMarkerMaxVal');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{D4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/morbidity/sugar",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"morbidity",
										"sugar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Valid Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 204\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate the response schema for successful deletion\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
											"    pm.expect(responseData.status).to.exist.and.to.be.a('number');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{D4_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/patient/143",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"patient",
										"143"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Invalid Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body schema for DELETE request\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{D4_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/143",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"patient",
										"143"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Patient",
			"item": [
				{
					"name": "Patient Login Logout",
					"item": [
						{
							"name": "Patient Invalid Login",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Patient Logout",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtNUBnbWFpbC5jb20iLCJpYXQiOjE3MjI0NTI3MjAsImV4cCI6MTcyMjQ4MTUyMH0.UjGoOpe9iAmcssj-bPw4IGf6EKRKQmmqpR2REJLf3ovNOMBqmmXtfuAYyXBA9IaGfLTIr4rKv8cCJ8j9N_ORwQ",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/logoutdietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"logoutdietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patient Login",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Patient Records",
					"item": [
						{
							"name": "Retrieve All Patient Info",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{D4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/patient",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Patient file by File Id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{D4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/patient/testReports/viewFile/66ac37aa3e6c022b073da33f",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"patient",
										"testReports",
										"viewFile",
										"66ac37aa3e6c022b073da33f"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve All Morbidity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//const Morbidity=pm.response.json();",
											"pm.collectionVariables.set(\"{{Morbidities}}\", pm.response.json());",
											"",
											"//const M1=Morbidities.map((value)=>value.morbidityId);",
											"console.log(Morbidities);",
											"//console.log(M1.indexOf('morbidityTestName')"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/morbidity",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Morbidity condition by Test name",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/morbidity",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Test Reports",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Get Patient File",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{P1_token_229}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/patient/229",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"patient",
										"229"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseURL",
			"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician",
			"type": "string"
		},
		{
			"key": "Admin_token",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtNUBnbWFpbC5jb20iLCJpYXQiOjE3MjI3MTQ0NTYsImV4cCI6MTcyMjc0MzI1Nn0.k8OLhYK_jEEGm-_lQPVVw9oeC9LjDK_3C380vapENvsPO6uQSZtLdu4lEhIbU9BtDMOPcRljBew3di1UaVcDrA"
		},
		{
			"key": "D1_token",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJVS19EMUBnbWFpbC5jb20iLCJpYXQiOjE3MjI2MTkyODMsImV4cCI6MTcyMjY0ODA4M30.gH1YGfci3yz3j3WOY7QHLr1esqIUiHzCfbK3j-e9bT7bJzcMuhBnT8uwSQHQbKfAEzYfhuP4_Ko9EJlJPk7Zhw",
			"type": "string"
		},
		{
			"key": "D2_token",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJVS19EMkBnbWFpbC5jb20iLCJpYXQiOjE3MjI0NjUwNjEsImV4cCI6MTcyMjQ5Mzg2MX0.ddJEjOzFapZaDtydCRLS03Ee7jkW_UNxFn7aaOZSzl6sqgPCcfvdxCOySa0THw0JNPrVAhjf2RNWq4MIHAkspA",
			"type": "string"
		},
		{
			"key": "D3_token",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJVS19EM0BnbWFpbC5jb20iLCJpYXQiOjE3MjI0NjUxNTYsImV4cCI6MTcyMjQ5Mzk1Nn0.8vJ6LT8rdoEQjiLMTPmgs0_FESY0u0KV6Ev-hT_kGTUVjLbstJQPBcJuzVqPAPwvgVh7hJwJjVjMpgTwutqPDQ",
			"type": "string"
		},
		{
			"key": "D4_token",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJVS19ENEBnbWFpbC5jb20iLCJpYXQiOjE3MjI3MTY1NTgsImV4cCI6MTcyMjc0NTM1OH0.o_D_pVltO2PQBLY3XyJp7K_iAHrgoOozcjn2u4idAqIgt2w-XZQzjo_XpRDkuK5p6P9EybcxHwyNhKKimOigNQ",
			"type": "string"
		},
		{
			"key": "patientValue",
			"value": "{\n\"FirstName\":\"Aadhi\",\n\"LastName\": \"Ram\",\n\"ContactNumber\": \"3124567893\",\n\"Email\": \"UK_D1P1@gmail.com\",\n\"Allergy\": \"Almond\",\n\"FoodPreference\": \"Vegetarian\",\n\"CuisineCategory\":\"punjabi\",\n\"DateOfBirth\": \"1983-03-11\"\n}",
			"type": "string"
		},
		{
			"key": "P1_token_229",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJVS19QNUBnbWFpbC5jb20iLCJpYXQiOjE3MjI1Njk3NDMsImV4cCI6MTcyMjU5ODU0M30.OymTmLd4m83-XLARi3DR4-IOoDPxZU6Q5yONnd198EdJsZwywuGNkYSXjh1DVMgNrXet-iTzCDwV90nYF5HBfw",
			"type": "string"
		}
	]
}