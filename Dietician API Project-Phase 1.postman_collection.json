{
	"info": {
		"_postman_id": "fb441542-216a-4235-994b-95b315e45a76",
		"name": "Dietician API Project-Phase 1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37218245"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "Admin Login Logout",
					"item": [
						{
							"name": "Admin Invalid Login",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\":\"test\",\n  \"userLoginEmail\":\"Team5@gmail.com\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/login",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Login",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"var a_token= jsonData.token;",
											"pm.collectionVariables.set(\"Admin_token_new\", jsonData.token);",
											"pm.collectionVariables.replaceIn(\"a_token{{Admin_token_new}}\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\":\"{{AdminPw}}\",\n  \"userLoginEmail\":\"{{Adminuserid}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/login",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Logout",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token_new}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/logoutdietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"logoutdietician"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dietician Controller",
					"item": [
						{
							"name": "Create Dietician with Invaild Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code is Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"console.log(response);",
											"",
											"pm.test(\"Response contains status is 400\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property(\"status\");",
											"    ",
											"});",
											"",
											"pm.test(\"Response has Content-Type header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response name field is correct\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.error).to.eql(\"Bad Request\");",
											"    console.log(response.error)",
											"});",
											"",
											"",
											"var jsonData = pm.response.json();",
											"var firstname=jsonData.firstName;",
											"var lastname=jsonData.lastName;",
											"var contant=jsonData.contact;",
											"var email=jsonData.userLoginEmail;",
											"var h_pincode=jsonData.dHospitalPinCode;",
											"",
											"console.log(firstname);",
											"console.log(lastname);",
											"console.log(contant);",
											"console.log(email);",
											"console.log(h_pincode);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token_new}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\n{\n  \"ContactNumber\": \"{{InvalidNumber}}\",\n  \"DateOfBirth\": \"{{InvalidDateOfBirth}}\",\n  \"Education\": \"{{InvalidEducation}}\",\n  \"Email\": \"{{InvalidEmail}}\",\n  \"Firstname\": \"{{InvalidFirstname}}\",\n  \"HospitalCity\": \"{{InvalidHospitalCity}}\",\n  \"HospitalName\": \"{{InvalidHospitalName}}\",\n  \"HospitalPincode\": \"{{InvalidHospitalPincode}}\",\n  \"HospitalStreet\": \"{{InvalidHospitalStreet}}\",\n  \"Lastname\": \"{{InvalidLastname}}\"\n \n}\n\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Dietician by Valid details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"console.log(response);",
											"",
											"pm.test(\"Response contains lastname field\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property(\"Lastname\");",
											"    console.log(response);",
											"});",
											"",
											"pm.test(\"Response has Content-Type header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"",
											"const schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"Firstname\": { \"type\": \"string\" },",
											"    \"Lastname\": { \"type\": \"string\" },",
											"    \"ContactNumber\": { \"type\": \"string\" },",
											"    \"DateOfBirth\": { \"type\": \"string\", \"format\": \"date-time\" },",
											"    \"Email\": { \"type\": \"string\", \"format\": \"email\" },",
											"    \"HospitalName\": { \"type\": \"string\" },",
											"    \"HospitalStreet\": { \"type\": \"string\" },",
											"    \"HospitalCity\": { \"type\": \"string\" },",
											"    \"HospitalPincode\": { \"type\": \"string\" },",
											"    \"Education\": { \"type\": \"string\" }",
											"  },",
											"  \"required\": [\"Firstname\", \"Lastname\", \"ContactNumber\", \"DateOfBirth\", \"Email\", \"HospitalName\", \"HospitalStreet\", \"HospitalCity\", \"HospitalPincode\", \"Education\"]",
											"};",
											"",
											"pm.test('Validate JSON Schema', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Response contains dietician information\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property(\"Firstname\", pm.variables.get(\"Firstname\"));",
											"    pm.expect(response).to.have.property(\"Lastname\", pm.variables.get(\"Lastname\"));",
											"    pm.expect(response).to.have.property(\"Email\", pm.variables.get(\"Email\"));",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var D21_Email= jsonData.Email;",
											"var D21_Pw= jsonData.loginPassword;",
											"var D21_Id= jsonData.id;",
											"pm.collectionVariables.set(\"D21_LoginID\", jsonData.Email);",
											"pm.collectionVariables.replaceIn(\"D21_Email{{D21_LoginID}}\");",
											"pm.collectionVariables.set(\"D21_Password\", jsonData.loginPassword);",
											"pm.collectionVariables.replaceIn(\"D21_Pw{{D21_Password}}\");",
											"pm.collectionVariables.set(\"Deitician_21_ID\", jsonData.loginPassword);",
											"pm.collectionVariables.replaceIn(\"D21_Id{{Deitician_21_ID}}\");",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token_new}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\n{\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Education\": \"{{Education}}\", \n  \"Email\": \"{{Email}}\",\n  \"Firstname\": \"{{Firstname}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"Lastname\": \"{{Lastname}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Dietician with Duplicate Value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code is Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"console.log(response);",
											"",
											"pm.test(\"Response contains errorCode\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property(\"errorCode\");",
											"    console.log(response);",
											"});",
											"",
											"pm.test(\"Response has Content-Type header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response name field is correct\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.errorCode).to.eql(\"DUPLICATE_ENTITY\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token_new}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\n{\n  \"ContactNumber\": \"{{DupContactNumber}}\",\n  \"DateOfBirth\": \"{{DupDateOfBirth}}\",\n  \"Education\": \"{{DupEducation}}\",\n  \"Email\": \"{{DupEmail}}\",\n  \"Firstname\": \"{{DupFirstname}}\",\n  \"HospitalCity\": \"{{DupHospitalCity}}\",\n  \"HospitalName\": \"{{DupHospitalName}}\",\n  \"HospitalPincode\": \"{{DupHospitalPincode}}\",\n  \"HospitalStreet\": \"{{DupHospitalStreet}}\",\n  \"Lastname\": \"{{DupLastname}}\"\n \n}\n\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Dietician by Valid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"console.log(response);",
											"",
											"pm.test(\"Response contains lastname field\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property(\"Lastname\");",
											"    console.log(response);",
											"});",
											"",
											"pm.test(\"Response has Content-Type header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"verifying the HospitalCity value \", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.HospitalCity).to.eql(\"Delhi\");",
											"    console.log(response.HospitalCity);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the updated name field\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property(\"HospitalPincode\");",
											"            ",
											"});",
											"",
											"const schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"Firstname\": { \"type\": \"string\" },",
											"    \"Lastname\": { \"type\": \"string\" },",
											"    \"ContactNumber\": { \"type\": \"string\" },",
											"    \"DateOfBirth\": { \"type\": \"string\", \"format\": \"date-time\" },",
											"    \"Email\": { \"type\": \"string\", \"format\": \"email\" },",
											"    \"HospitalName\": { \"type\": \"string\" },",
											"    \"HospitalStreet\": { \"type\": \"string\" },",
											"    \"HospitalCity\": { \"type\": \"string\" },",
											"    \"HospitalPincode\": { \"type\": \"string\" },",
											"    \"Education\": { \"type\": \"string\" }",
											"  },",
											"  \"required\": [\"Firstname\", \"Lastname\", \"ContactNumber\", \"DateOfBirth\", \"Email\", \"HospitalName\", \"HospitalStreet\", \"HospitalCity\", \"HospitalPincode\", \"Education\"]",
											"};",
											"",
											"pm.test('Validate JSON Schema', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token_new}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{Admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n{\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Education\": \"{{Education}}\", \n  \"Email\": \"{{Email}}\",\n  \"Firstname\": \"{{Firstname}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"Lastname\": \"{{Lastname}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician/{{Deitician_21_ID}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician",
										"{{Deitician_21_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Dietician For Invalid Dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Assertion message is Not Found\",function(){",
											"    pm.response.to.have.status(\"Not Found\")",
											"})",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.test(\"verifying the response errorCode field\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.errorCode).to.eql(\"NOT_FOUND\");",
											"    console.log(response.errorCode);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token_new}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician/{{Invalid_DieticianID}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician",
										"{{Invalid_DieticianID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve All Dietician Info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"pm.test(\"checking Response is JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
											"});",
											"",
											"",
											"",
											"const schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"Firstname\": { \"type\": \"string\" },",
											"    \"Lastname\": { \"type\": \"string\" },",
											"    \"ContactNumber\": { \"type\": \"string\" },",
											"    \"DateOfBirth\": { \"type\": \"string\", \"format\": \"date-time\" },",
											"    \"Email\": { \"type\": \"string\", \"format\": \"email\" },",
											"    \"HospitalName\": { \"type\": \"string\" },",
											"    \"HospitalStreet\": { \"type\": \"string\" },",
											"    \"HospitalCity\": { \"type\": \"string\" },",
											"    \"HospitalPincode\": { \"type\": \"string\" },",
											"    \"Education\": { \"type\": \"string\" }",
											"  },",
											"  \"required\": [\"Firstname\", \"Lastname\", \"ContactNumber\", \"DateOfBirth\", \"Email\", \"HospitalName\", \"HospitalStreet\", \"HospitalCity\", \"HospitalPincode\", \"Education\"]",
											"};",
											"",
											"pm.test('Validate JSON Schema', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"pm.test(\"Response contains dietician information\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.be.an('array'); ",
											"",
											"    response.forEach(function(item) {",
											"        pm.expect(item).to.have.property(\"id\");",
											"    });",
											"    console.log(response);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.globals.get('tv4'));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token_new}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Dietician info by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"console.log(response);",
											"",
											"pm.test(\"Response contains lastname field\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property(\"Lastname\");",
											"    ",
											"});",
											"",
											"pm.test(\"Response has Content-Type header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Verify Response ContactNumber field is correct\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.ContactNumber).to.eql(\"8234567899\");",
											"        console.log(response.ContactNumber);",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token_new}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"6234567890\",\n  \"DateOfBirth\": \"1989-02-24T18:14:08.570Z\",\n  \"Education\": \"MSc Nutrition and Dietetics\",\n  \"Email\": \"UK_D3@gmail.com\",\n  \"Firstname\": \"CCC\",\n  \"HospitalCity\": \"Kerala\",\n  \"HospitalName\": \"Fortis\",\n  \"HospitalPincode\": \"923456\",\n  \"HospitalStreet\": \"Vasant St\",\n  \"Lastname\": \"YYY\"\n \n}\n\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician/{{Deitician_21_ID}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician",
										"{{Deitician_21_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Dietician info with Invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Not Found\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"console.log(response);",
											"",
											"",
											"",
											"pm.test(\"Response has Content-Type header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response contains errorCode field\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property(\"errorCode\");",
											"    console.log(response);",
											"});",
											"",
											"pm.test(\"Response name field is correct\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.errorCode).to.eql(\"NOT_FOUND\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token_new}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"6234567890\",\n  \"DateOfBirth\": \"1989-02-24T18:14:08.570Z\",\n  \"Education\": \"MSc Nutrition and Dietetics\",\n  \"Email\": \"UK_D3@gmail.com\",\n  \"Firstname\": \"CCC\",\n  \"HospitalCity\": \"Kerala\",\n  \"HospitalName\": \"Fortis\",\n  \"HospitalPincode\": \"923456\",\n  \"HospitalStreet\": \"Vasant St\",\n  \"Lastname\": \"YYY\"\n \n}\n\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician/{{Invalid_DieticianID}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician",
										"{{Invalid_DieticianID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve All Morbidity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const schema = {",
											"  \"type\": \"array\",",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"morbidityId\": { \"type\": \"integer\" },",
											"      \"morbidityMarkerMaxVal\": { \"type\": \"number\" },",
											"      \"morbidityMarkerMinVal\": { \"type\": \"number\" },",
											"      \"morbidityNameRegex\": { \"type\": \"string\" },",
											"      \"morbidityTestId\": { \"type\": \"string\" },",
											"      \"morbidityTestName\": { \"type\": \"string\" },",
											"      \"morbidityTestUnit\": { \"type\": \"string\" }",
											"    },",
											"    \"required\": [",
											"      \"morbidityId\", ",
											"      \"morbidityMarkerMaxVal\", ",
											"      \"morbidityMarkerMinVal\", ",
											"      \"morbidityNameRegex\", ",
											"      \"morbidityTestId\", ",
											"      \"morbidityTestName\", ",
											"      \"morbidityTestUnit\"",
											"    ]",
											"  }",
											"};",
											"",
											"",
											"pm.test(\"Response schema is valid\", function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response contains morbidity information\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.forEach(item => {",
											"        pm.expect(item).to.have.property(\"morbidityId\").that.is.a('number');",
											"        pm.expect(item).to.have.property(\"morbidityMarkerMaxVal\").that.is.a('number');",
											"        pm.expect(item).to.have.property(\"morbidityMarkerMinVal\").that.is.a('number');",
											"        pm.expect(item).to.have.property(\"morbidityNameRegex\").that.is.a('string');",
											"        pm.expect(item).to.have.property(\"morbidityTestId\").that.is.a('string');",
											"        pm.expect(item).to.have.property(\"morbidityTestName\").that.is.a('string');",
											"        pm.expect(item).to.have.property(\"morbidityTestUnit\").that.is.a('string');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Verify Response contains morbidityTestName\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.be.an('array'); ",
											"",
											"    response.forEach(function(item) {",
											"        pm.expect(item).to.have.property(\"morbidityTestName\");",
											"        ",
											"    });",
											"    console.log(response);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"followAuthorizationHeader": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token_new}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/morbidity",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Morbidity condition by Test name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const schema = {",
											"  \"type\": \"array\",",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"morbidityId\": { \"type\": \"integer\" },",
											"      \"morbidityMarkerMaxVal\": { \"type\": \"number\" },",
											"      \"morbidityMarkerMinVal\": { \"type\": \"number\" },",
											"      \"morbidityNameRegex\": { \"type\": \"string\" },",
											"      \"morbidityTestId\": { \"type\": \"string\" },",
											"      \"morbidityTestName\": { \"type\": \"string\" },",
											"      \"morbidityTestUnit\": { \"type\": \"string\" }",
											"    },",
											"    \"required\": [",
											"      \"morbidityId\", ",
											"      \"morbidityMarkerMaxVal\", ",
											"      \"morbidityMarkerMinVal\", ",
											"      \"morbidityNameRegex\", ",
											"      \"morbidityTestId\", ",
											"      \"morbidityTestName\", ",
											"      \"morbidityTestUnit\"",
											"    ]",
											"  }",
											"};",
											"",
											"",
											"pm.test(\"Response schema is valid\", function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response contains morbidity information\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.forEach(item => {",
											"        pm.expect(item).to.have.property(\"morbidityId\").that.is.a('number');",
											"        pm.expect(item).to.have.property(\"morbidityMarkerMaxVal\").that.is.a('number');",
											"        pm.expect(item).to.have.property(\"morbidityMarkerMinVal\").that.is.a('number');",
											"        pm.expect(item).to.have.property(\"morbidityNameRegex\").that.is.a('string');",
											"        pm.expect(item).to.have.property(\"morbidityTestId\").that.is.a('string');",
											"        pm.expect(item).to.have.property(\"morbidityTestName\").that.is.a('string');",
											"        pm.expect(item).to.have.property(\"morbidityTestUnit\").that.is.a('string');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Verify Response contains morbidityTestUnit\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.be.an('array'); ",
											"",
											"    response.forEach(function(item) {",
											"        pm.expect(item).to.have.property(\"morbidityTestUnit\");",
											"    });",
											"    console.log(response);",
											"",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token_new}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/morbidity/{{morbidityName}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"morbidity",
										"{{morbidityName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Morbidity condition by Invalid Test name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status code is Not Found\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"console.log(response);",
											"",
											"pm.test(\"Response contains errorCode field\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property(\"errorCode\");",
											"});",
											"",
											"pm.test(\"Response has Content-Type header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response errorCode field is correct\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.errorCode).to.eql(\"NOT_FOUND\");",
											"        console.log(response.errorCode);",
											"",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token_new}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/morbidity/{{Invalid_morbidityName}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"morbidity",
										"{{Invalid_morbidityName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Valid Dietician ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200 or 404\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
											"});",
											"",
											"   ",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response has correct headers\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token_new}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician/{{Delete_Did}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician",
										"{{Delete_Did}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Invalid Dietician ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Not Found\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"console.log(response);",
											"",
											"",
											"",
											"pm.test(\"Response has Content-Type header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response contains errorCode field\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property(\"errorCode\");",
											"});",
											"",
											"pm.test(\"Response name field is correct\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.errorCode).to.eql(\"NOT_FOUND\");",
											"    console.log(response.errorCode)",
											"",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"6234567890\",\n  \"DateOfBirth\": \"1989-02-24T18:14:08.570Z\",\n  \"Education\": \"MSc Nutrition and Dietetics\",\n  \"Email\": \"UK_D3@gmail.com\",\n  \"Firstname\": \"CCC\",\n  \"HospitalCity\": \"Kerala\",\n  \"HospitalName\": \"Fortis\",\n  \"HospitalPincode\": \"923456\",\n  \"HospitalStreet\": \"Vasant St\",\n  \"Lastname\": \"YYY\"\n \n}\n\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician/{{Delete_InvalidDid}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician",
										"{{Delete_InvalidDid}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Dietician",
			"item": [
				{
					"name": "Dietician Login Logout",
					"item": [
						{
							"name": "Dietician Invalid Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Assertion message is Unauthorized\",function(){",
											"    pm.response.to.have.status(\"Unauthorized\")",
											"})",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.test(\"verifying the response errorMessage field\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.errorMessage).to.eql(\"Bad credentials\");",
											"    console.log(response.errorMessage);",
											"});",
											"",
											"pm.test(\"Response contains errorCode field\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property(\"errorCode\");",
											"    console.log(response);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"{{password}}\",\n  \"userLoginEmail\": \"{{Email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/login",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dietician Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate JSON schema\", function () {",
											"    var response = pm.response.json();  ",
											"    var responseSchema = {",
											"        \"token\": \"string\",",
											"        \"type\": \"string\",",
											"        \"userId\": \"number\",",
											"        \"loginUserEmail\": \"string\",",
											"        \"roles\": \"array\"",
											"    };",
											"",
											"  ",
											"    function validateSchema(obj, schema) {",
											"        for (var key in schema) {",
											"            if (schema.hasOwnProperty(key)) {",
											"                pm.expect(obj).to.have.property(key);",
											"                if (schema[key] === \"array\") {",
											"                    pm.expect(Array.isArray(obj[key])).to.be.true;",
											"                } else {",
											"                    pm.expect(typeof obj[key]).to.equal(schema[key]);",
											"                }",
											"            }",
											"        }",
											"    }",
											"",
											"    validateSchema(response, responseSchema);",
											"});",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains type field\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property(\"type\");",
											"    console.log(response);",
											"});",
											"",
											"pm.test(\"Response has Content-Type header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"verifying the response loginUserEmail field\", function () {",
											"    var response = pm.response.json();",
											"   ",
											"    console.log(response.loginUserEmail);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"{{D21_Password}}\",\n  \"userLoginEmail\": \"{{D21_LoginID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/login",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dietician Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"pm.test(\"Assertion message is OK\",function(){",
											"    pm.response.to.have.status(\"OK\")",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/logoutdietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"logoutdietician"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Patient Controller",
					"item": [
						{
							"name": "Create Patient with Invaild Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{D4_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{{patientValue}}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50788-00dc-4b60-acec-9a405c9f26c1"
										}
									]
								},
								"url": {
									"raw": "{{BaseURL}}/patient",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{D1_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{{patientValue}}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50788-00dc-4b60-acec-9a405c9f26c1"
										}
									]
								},
								"url": {
									"raw": "{{BaseURL}}/patient",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Patient with Duplicate Value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Patient already exists with given DateOfBirth and ContactNumber\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"DUPLICATE_ENTITY\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{D1_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{{patientValue}}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50788-00dc-4b60-acec-9a405c9f26c1"
										}
									]
								},
								"url": {
									"raw": "{{BaseURL}}/patient",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Patient",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Update Patient with Invalid Data",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Add New Reports for existing Patient with Vitals",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Add New Reports  for existing Patient without Vitals Copy",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Add New Reports for Invalid Patient with Vitals Copy",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Add New Reports  for Invalid Patient without Vitals",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Patients Morbidity Details",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Patients Morbidity Details with Invalid PatientID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Retrieve All Patient Info",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{D4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/patient",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve for Invalid Patient info",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{D4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/patient",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Patient file by File Id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{D4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/patient/testReports/viewFile/66ac37aa3e6c022b073da33f",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"patient",
										"testReports",
										"viewFile",
										"66ac37aa3e6c022b073da33f"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Patient file by Invalid File Id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{D4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/patient/testReports/viewFile/66ac37aa3e6c022b073da33f",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"patient",
										"testReports",
										"viewFile",
										"66ac37aa3e6c022b073da33f"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve All Morbidity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//const Morbidity=pm.response.json();",
											"pm.collectionVariables.set(\"{{Morbidities}}\", pm.response.json());",
											"",
											"//const M1=Morbidities.map((value)=>value.morbidityId);",
											"console.log(Morbidities);",
											"//console.log(M1.indexOf('morbidityTestName')"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/morbidity",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Morbidity condition by Test name",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/morbidity",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Morbidity condition by Invalid Test name",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/morbidity",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Valid Patient",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Delete Invalid Patient",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Patient",
			"item": [
				{
					"name": "Patient Login Logout",
					"item": [
						{
							"name": "Patient Invalid Login",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Patient Logout",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtNUBnbWFpbC5jb20iLCJpYXQiOjE3MjI0NTI3MjAsImV4cCI6MTcyMjQ4MTUyMH0.UjGoOpe9iAmcssj-bPw4IGf6EKRKQmmqpR2REJLf3ovNOMBqmmXtfuAYyXBA9IaGfLTIr4rKv8cCJ8j9N_ORwQ",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/logoutdietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"logoutdietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patient Login",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Patient Records",
					"item": [
						{
							"name": "Retrieve All Patient Info",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{D4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/patient",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"patient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Patient file by File Id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{D4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/patient/testReports/viewFile/66ac37aa3e6c022b073da33f",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"patient",
										"testReports",
										"viewFile",
										"66ac37aa3e6c022b073da33f"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve All Morbidity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//const Morbidity=pm.response.json();",
											"pm.collectionVariables.set(\"{{Morbidities}}\", pm.response.json());",
											"",
											"//const M1=Morbidities.map((value)=>value.morbidityId);",
											"console.log(Morbidities);",
											"//console.log(M1.indexOf('morbidityTestName')"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/morbidity",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Morbidity condition by Test name",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/morbidity",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Test Reports",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Get Patient File",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{P1_token_229}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/patient/229",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"patient",
										"229"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseURL",
			"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician",
			"type": "string"
		},
		{
			"key": "Admin_token",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtNUBnbWFpbC5jb20iLCJpYXQiOjE3MjI4NjM3NTUsImV4cCI6MTcyMjg5MjU1NX0.ivyTuW_Z4Y-2vi_O5jr88sFBNpHJhe3VblUKUQCf0DFNMVafAr-JU53D0C77W1k9menfaFdgujYOD-K3VwYM3Q",
			"disabled": true
		},
		{
			"key": "D1_token",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJVS19EMUBnbWFpbC5jb20iLCJpYXQiOjE3MjI2MTkyODMsImV4cCI6MTcyMjY0ODA4M30.gH1YGfci3yz3j3WOY7QHLr1esqIUiHzCfbK3j-e9bT7bJzcMuhBnT8uwSQHQbKfAEzYfhuP4_Ko9EJlJPk7Zhw",
			"type": "string",
			"disabled": true
		},
		{
			"key": "D2_token",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJVS19EMkBnbWFpbC5jb20iLCJpYXQiOjE3MjI0NjUwNjEsImV4cCI6MTcyMjQ5Mzg2MX0.ddJEjOzFapZaDtydCRLS03Ee7jkW_UNxFn7aaOZSzl6sqgPCcfvdxCOySa0THw0JNPrVAhjf2RNWq4MIHAkspA",
			"type": "string",
			"disabled": true
		},
		{
			"key": "D3_token",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJVS19EM0BnbWFpbC5jb20iLCJpYXQiOjE3MjI0NjUxNTYsImV4cCI6MTcyMjQ5Mzk1Nn0.8vJ6LT8rdoEQjiLMTPmgs0_FESY0u0KV6Ev-hT_kGTUVjLbstJQPBcJuzVqPAPwvgVh7hJwJjVjMpgTwutqPDQ",
			"type": "string",
			"disabled": true
		},
		{
			"key": "D4_token",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJVS19ENEBnbWFpbC5jb20iLCJpYXQiOjE3MjI1NjE1NjgsImV4cCI6MTcyMjU5MDM2OH0.Nt7H5NivAQkna4EwjiHX0IO1Z1HfXoYHJW3-gdAPZtPawT56eJPM2ieyuWe-q5hs0YHJgTYljbv6yX1dSTcuyA",
			"type": "string",
			"disabled": true
		},
		{
			"key": "patientValue",
			"value": "{\n\"FirstName\":\"Aadhi\",\n\"LastName\": \"Ram\",\n\"ContactNumber\": \"3124567893\",\n\"Email\": \"UK_D1P1@gmail.com\",\n\"Allergy\": \"Almond\",\n\"FoodPreference\": \"Vegetarian\",\n\"CuisineCategory\":\"punjabi\",\n\"DateOfBirth\": \"1983-03-11\"\n}",
			"type": "string",
			"disabled": true
		},
		{
			"key": "P1_token_229",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJVS19QNUBnbWFpbC5jb20iLCJpYXQiOjE3MjI1Njk3NDMsImV4cCI6MTcyMjU5ODU0M30.OymTmLd4m83-XLARi3DR4-IOoDPxZU6Q5yONnd198EdJsZwywuGNkYSXjh1DVMgNrXet-iTzCDwV90nYF5HBfw",
			"type": "string",
			"disabled": true
		},
		{
			"key": "Admin_token_new",
			"value": "",
			"type": "string"
		},
		{
			"key": "D21_LoginID",
			"value": ""
		},
		{
			"key": "D21_Password",
			"value": ""
		},
		{
			"key": "Deitician_21_ID",
			"value": ""
		}
	]
}
